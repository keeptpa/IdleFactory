@using System.Drawing
@using IdleFactory.State
@using IdleFactory.Util
@using Microsoft.Extensions.Localization
@rendermode InteractiveServer
@inherits BaseRefreshablePage
@inject IStringLocalizer<Resources> localizer;


<input class="input-group-sm" type="number" @bind="Quantity" style="width:70px" min="0" step="1" >

<select @onfocus="RefreshData" @bind="Id" class="form-select" style="width: 120px; background-color: @GetSlotColor()">
    <option value="" selected="@(slot.GetItem() == null || slot.GetItem().Quantity == 0)"></option>
    @foreach (var item in inventoryItems)
    {
        <option value="@item.ID" selected="@(Id == item.ID)">@localizer[item.ID] (@item.Quantity)</option>
    }
    
</select>

@code {
    private List<ResourceItemBase> inventoryItems;
    private string lastItemIdentity = null;
    private string Id
    {
        get
        {
            if (slot.GetItem()?.GetIdentity() != lastItemIdentity)
            {
                RefreshData();
            }
            lastItemIdentity = slot.GetItem()?.GetIdentity();
            return slot.GetItem()?.ID;
        }
        set
        {
            if(value == slot.GetItem()?.ID) return;
            var quantity = string.IsNullOrEmpty(value) ? 0 : slot.GetItem()?.Quantity;
            OnDeselect();
            if (slot.GetItem() == null)
            {
                slot.SetItem(new ResourceItemBase()
                {
                    ID = value,
                    Quantity = quantity ?? 0
                });
            }
            else
            {
                slot.GetItem().ID = value;
            }
            OnSelected();
        }
    }

    private int Quantity
    {
        get => slot.GetItem()?.Quantity ?? 0;
        set
        {
            if(value == slot.GetItem()?.Quantity) return;
            value = Math.Max(0, value);

            var id = slot.GetItem()?.ID;
            OnDeselect();
            if (slot.GetItem() == null)
            {
                slot.SetItem(new ResourceItemBase()
                {
                    ID = id ?? "",
                    Quantity = value
                });
            }
            else
            {
                slot.GetItem().Quantity = value;
            }
            slot.SetItem(QualifyItem(slot.GetItem()));
            OnSelected();
        }
    }

    private ResourceItemBase? QualifyItem(ResourceItemBase? item)
    {
        if (item == null || string.IsNullOrEmpty(item.ID) || item.Quantity <= 0) return item; //means the user isn't finish selecting
        var state = SingletonHolder.GetSingleton<GameStateHolder>();
        if (state.GetResource(item.ID) == null)
        {
            return null;
        }
        var quantityAvailable = Math.Min(state.GetResource(item.ID).Quantity, slot.MaxQuantity);
        var quantityRequested = Quantity;
        var quantityToTake = Math.Min(quantityAvailable, quantityRequested);
        item.Quantity = quantityToTake;
        return item;
    }

    private void OnDeselect()
    {
        if (string.IsNullOrEmpty(slot.GetItem()?.ID) || slot.GetItem()?.Quantity <= 0) return;
        var state = SingletonHolder.GetSingleton<GameStateHolder>();
        state.AddResource(slot.GetItem().ID, slot.GetItem().Quantity);
        slot.SetItem(null);
    }
    
    private void OnSelected()
    {
        if (string.IsNullOrEmpty(slot.GetItem()?.ID) || slot.GetItem()?.Quantity <= 0) return;
        var state = SingletonHolder.GetSingleton<GameStateHolder>();
        //slot.SetItem(item);
        state.AddResource(slot.GetItem().ID, -slot.GetItem().Quantity);
        slot.SetItem(slot.GetItem());
    }

    private string GetSlotColor()
    {
        if (slot.Tag?.HasTagFilter("notInRecipe") == true) return "#1a7009";
        return "";
    }

    [Parameter] public ItemSlot slot { get; set; }
    [Parameter] public bool isOutput { get; set; }

    private void RefreshData()
    {
        if (isOutput)
        {
            inventoryItems = slot.GetItem()?.IsValid() == true ? [slot.GetItem()] : [];
        }
        else
        {
            var state = SingletonHolder.GetSingleton<GameStateHolder>();
            inventoryItems = state.GetAllResources(slot.TagFilter, true).Values.ToList();
            
            if (slot.GetItem()?.IsValid() == true && state.GetResource(slot.GetItem().ID) == null)// if all the item is selected we need to add it to list so it can show up
            {
                var fakeItem = new ResourceItemBase();
                fakeItem.ID = slot.GetItem().ID;
                fakeItem.Quantity = 0;
                inventoryItems.Add(fakeItem);
            }

            if (slot.IsValid && !inventoryItems.Any(i => i.ID == slot.GetItem().ID))
            {
                var fakeItem = new ResourceItemBase();
                fakeItem.ID = slot.GetItem().ID;
                fakeItem.Quantity = 0;
                inventoryItems.Add(fakeItem);
            }
        }
    }

    protected override void OnInitialized()
    {
        RefreshData();
        base.OnInitialized();
    }

}