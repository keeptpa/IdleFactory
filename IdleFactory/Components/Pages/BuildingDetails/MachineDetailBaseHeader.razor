@using IdleFactory.Game.Building.Base
@using IdleFactory.Game.DataBase
@using IdleFactory.Game.Modules
@using IdleFactory.Util
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Resources> Localizer
@inherits BaseRefreshablePage

<BuildingBaseHead Building="_machine"/>
<div>@Localizer["str.selectRecipe"]</div>
<select @bind="selectedRecipe" class="form-select" style="width: 200px">
    <option value=""></option>
    @foreach (var recipe in machine.GetAllAvailableRecipes())
    {
        <option selected="@(recipe.ID == selectedRecipe)" value="@recipe.ID">@Utils.DynamicStringFormat(Localizer["str.recipeDetail"], new string[]
        {
            Utils.GetOutputsString(recipe), Utils.GetIngredientsString(recipe)
        })</option>
    }
</select>
<div>@Localizer["str.progress"]</div>
@*<div class="progress">
    <div class="progress-bar-animated progress-bar-striped bg-info" role="progressbar" style="width: @(machine.GetProgress() * 100)%"></div>
</div>*@
<MudProgressLinear @ref="_progressBar" Color="Color.Primary" Value="cookProgress"/>
@code {
    private WorkMachineBase _machine;
    private string _selectedRecipe;
    private MudProgressLinear _progressBar;
    private bool highRefreshRateNeeded => machine.GetNowRecipe() != null && machine.GetNowRecipe().TimeToCook <= 20;

    private double cookProgress => machine.GetProgress() * 100;

    [Parameter]
    public WorkMachineBase machine
    {
        get => _machine;
        set => _machine = value;
    }

    public string selectedRecipe
    {
        get => _selectedRecipe;
        set
        {
            _selectedRecipe = value;
            var recipe = machine.SearchRecipe(value);
            //if (recipe != null)
            //{
                machine.SetRecipe(recipe);
            //}
        }
    }

    protected override void OnInitialized()
    {
        _selectedRecipe = machine.GetNowRecipe() != null ? machine.GetNowRecipe().ID : "";
        StartTimer((float)1 / UpdateModule.TickRate);
        base.OnInitialized();
    }

    protected override void OnTimer(object? state)
    {
        if(!highRefreshRateNeeded) return;
        SafeStateHasChanged();
        base.OnTimer(state);
    }
}