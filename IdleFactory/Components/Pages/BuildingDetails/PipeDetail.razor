@page "/PipeDetail/{buildingIndex}"
@using IdleFactory.Game.Building
@using IdleFactory.Util
@using Microsoft.Extensions.Localization
@rendermode InteractiveServer
@inherits BaseRefreshablePage

@inject IStringLocalizer<Resources> Localizer
@inject NavigationManager NavigationManager

@if (building != null)
{
    <hr class="hr"/>
    <button class="btn btn-primary" onclick="@GoBack">@Localizer["str.back"]</button>
    <p>@Utils.GetNameFromId(building.ID)</p>
    <p>@Localizer[building.Description]</p>
    <hr/>
    <div>
        <div>@Localizer["str.networkID"]: @building.Network.Guid</div>
        <div>@Localizer["str.networkNodes"]: @building.Network.GetNodeList().Count</div>

        <div>
            <div class="d-flex align-items-center" style="cursor: ns-resize;">
                <span style="text-decoration: underline" @onclick="ToggleNetworkMembersVisibility"> @Localizer["str.networkMembers"]:@building.Network.GetMemberList().Count@(showNetworkMembers ? "▼" : "►") </span>
            </div>
            @if (showNetworkMembers)
            {
                <div class="form-group">
                    <select multiple class="form-control">
                        @foreach (var member in building.Network.GetMemberList())
                        {
                            <option>@Utils.GetNameFromId(member.GetBuilding().ID) (@member.GetBuilding().Position.X, @member.GetBuilding().Position.Y)</option>
                        }
                    </select>
                </div>
            }
        </div>
    </div>
}
else
{
    <p>Building not found.</p>
}
<hr class="hr"/>
<button class="btn btn-primary" onclick="@GoBack">@Localizer["str.back"]</button>

@code {
    [Parameter] public string buildingIndex { get; set; }

    private Pipe? building;

    protected override void OnInitialized()
    {
        StartTimer(1);
        building = Utils.GetBuildingWithIndex(int.Parse(buildingIndex)) as Pipe;
        base.OnInitialized();
    }

    protected override void OnTimer(object? state)
    {
        base.OnTimer(state);
        SafeStateHasChanged();
    }

    protected void GoBack()
    {
        NavigationManager.NavigateTo("/Surface");
    }

    private bool showNetworkMembers = false;

    private void ToggleNetworkMembersVisibility()
    {
        showNetworkMembers = !showNetworkMembers;
    }

}