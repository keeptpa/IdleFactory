@page "/PipeDetail/{buildingIndex}"
@using IdleFactory.ContainerSystem
@using IdleFactory.Game.Building
@using IdleFactory.Util
@using Microsoft.Extensions.Localization
@using MudBlazor

@rendermode InteractiveServer
@inherits BaseRefreshablePage

@inject IStringLocalizer<Resources> Localizer

@if (building != null)
{
    <BuildingBaseHead Building="building"/>
    @*<button class="btn btn-primary" @onclick="building.ReCreateNetwork">TEST RECREATE</button>*@
    <div>
        <div>@Localizer["str.networkID"]: @building.Network.Guid</div>
        <div>@Localizer["str.networkNodes"]: @building.Network.GetNodeList().Count</div>

        <MudExpansionPanels MultiExpansion="true">
            <MudExpansionPanel Text=@($"{Localizer["str.pipeActions"]}: {building.ActionList.Count}")>
                @*<MudCheckBox @bind-Value="showRelatedActions">@Localizer["str.showRelatedPipeAction"]</MudCheckBox>*@
                <button class="btn btn-primary" @onclick="() => { building.ActionList.Add(new ExtractAction()); }"> @Localizer["str.add"] </button>
                <MudDataGrid Items="_actions">
                    <Columns>
                        <TemplateColumn Title="@Localizer["str.takeFrom"]" HeaderStyle="width: 250px;">
                            <CellTemplate>
                                <MudStack Row>
                                    <MudSelect @bind-Value="@context.Item.SourceContainerGuid" Style="width: 250px;">
                                        <MudSelectItem Value="Guid.Empty"> None</MudSelectItem>
                                        @foreach (var container in building.GetAttachedContainers())
                                        {
                                            if (container.GetBuilding().UUID == @context.Item.TargetContainerGuid) continue;
                                            <MudSelectItem
                                                Value="@container.GetBuilding().UUID"> @container.GetBuilding().GetBuildingIdentityInfo()</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="@Localizer["str.sendTo"]" HeaderStyle="width: 250px;">
                            <CellTemplate>
                                <MudStack Row>
                                    <MudSelect @bind-Value="@context.Item.TargetContainerGuid" Style="width: 250px;">
                                        <MudSelectItem Value="Guid.Empty"> None</MudSelectItem>
                                        @foreach (var container in building.Network.GetMemberList())
                                        {
                                            if (container.GetBuilding().UUID == @context.Item.SourceContainerGuid) continue;
                                            <MudSelectItem
                                                Value="@container.GetBuilding().UUID"> @container.GetBuilding().GetBuildingIdentityInfo()</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="@Localizer["str.resources"]" HeaderStyle="width: 150px;">
                            <CellTemplate>
                                <MudStack Row>
                                    <MudSelect @bind-Value="@context.Item.Content.ID" Style="width: 50px;">
                                        <MudSelectItem Value="@string.Empty"> None</MudSelectItem>
                                        @foreach (var content in GetAttachedContainerContent(@context.Item))
                                        {
                                            <MudSelectItem
                                                Value="content.ID"> @Utils.GetNameFromId(content.ID) </MudSelectItem>
                                        }
                                    </MudSelect>
                                    *
                                    <MudNumericField HideSpinButtons="true" Style="width: 40px"
                                                     @bind-Value="@context.Item.Content.Quantity" Min="0"
                                                     Max="@building.PumpSpeed"/>
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="@Localizer["str.extractFromInput"]" HeaderStyle="width: 50px;">
                            <CellTemplate>
                                <MudCheckBox @bind-Value="@context.Item.ExtractFromInput"></MudCheckBox>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="@Localizer["str.enable"]" HeaderStyle="width: 50px;">
                            <CellTemplate>
                                <MudCheckBox @bind-Value="@context.Item.Enabled"></MudCheckBox>
                            </CellTemplate>
                        </TemplateColumn>

                        <TemplateColumn Title="@Localizer["str.pipeActions"]" HeaderStyle="width: 100px;">
                            <CellTemplate>
                                <MudButton Variant="Variant.Filled" OnClick="() => { building.ActionList.Remove(context.Item); }">@Localizer["str.remove"]</MudButton>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </MudExpansionPanel>
            <MudExpansionPanel Text=@($"{Localizer["str.pipeConnectNeighbor"]}: {building.GetAttachedContainers().Count}")>
                <div class="form-group">
                    <select multiple class="form-control">
                        @foreach (var member in building.GetAttachedContainers())
                        {
                            <option>@member.GetBuilding().GetBuildingIdentityInfo())</option>
                        }
                    </select>
                </div>
            </MudExpansionPanel>
            <MudExpansionPanel Text=@($"{Localizer["str.networkMembers"]}: {building.Network.GetMemberList().Count}") >
                <div class="form-group">
                    <select multiple class="form-control">
                        @foreach (var member in building.Network.GetMemberList())
                        {
                            <option>@member.GetBuilding().GetBuildingIdentityInfo()</option>
                        }
                    </select>
                </div>
            </MudExpansionPanel>
        </MudExpansionPanels>
        
        @*<div>
            <div class="d-flex align-items-center" style="cursor: ns-resize;">
                <span style="text-decoration: underline"
                      @onclick="ToggleActionVisibility"> @Localizer["str.pipeActions"]:@building.ActionList.Count@(showActionList ? "▼" : "►") </span>
            </div>
            @if (showActionList)
            {
                <button class="btn btn-primary"
                        @onclick="() => { building.ActionList.Add(new ExtractAction()); }"> @Localizer["str.add"] </button>
                $1$<div class="container">
                    <div class="row">
                        <div class="col">@Localizer["str.takeFrom"]</div>
                        <div class="col">@Localizer["str.sendTo"]</div>
                        <div class="col">@Localizer["str.resources"]</div>
                        <div class="col">@Localizer["str.extractFromInput"]</div>
                        <div class="col">@Localizer["str.enable"]</div>
                        <div class="col">@Localizer["str.pipeActions"]</div>
                    </div>

                    

                



                @foreach (var action in building.ActionList)
                    {
                        <div class="row">
                            <div class="col">
                                <select @bind="@action.SourceContainerGuid">
                                    <option value="@Guid.Empty"> None</option>
                                    
                

                @foreach (var container in building.GetAttachedContainers())
                                    {
                                        <option
                                            value="@container.GetBuilding().UUID"> @container.GetBuilding().GetBuildingIdentityInfo()  </option>
                                    }
                                </select>
                            </div>
                            <div class="col">
                                <select @bind="@action.TargetContainerGuid">
                                    <option value="@Guid.Empty"> None</option>
                                    
                

                @foreach (var container in building.Network.GetMemberList())
                                    {
                                        <option
                                            value="@container.GetBuilding().UUID"> @container.GetBuilding().GetBuildingIdentityInfo()  </option>
                                    }
                                </select>
                            </div>
                            <div class="col">
                                <select @bind="@action.Content.ID">
                                    <option value=""> None</option>
                                    
                

                @foreach (var container in building.GetAttachedContainers())
                                    {
                                        
                

                @foreach (var containerItemSlot in container.GetMachineContainer().GetOutputSlots())
                                        {
                                            
                

                @if (containerItemSlot.IsValid)
                                            {
                                                <option
                                                    value="@containerItemSlot.GetItem().ID"> @Utils.GetNameFromId(containerItemSlot.GetItem().ID) </option>
                                            }
                                        }
                                    }
                                </select>
                                *
                                <LimitationNumberInput Max="@building.PumpSpeed" Min="0" Step="1"
                                                       NowValue="@action.Content.Quantity"
                                                       Set="i => {action.Content.Quantity = i;}"/>

                            </div>
                            <div class="col">
                                <input type="checkbox" @bind="action.ExtractFromInput"/>
                            </div>
                            <div class="col">
                                <input type="checkbox" @bind="action.Enabled"/>
                            </div>
                            <div class="col">
                                <button class="btn btn-primary"
                                        
                

                @onclick="() => { building.ActionList.Remove(action); }"> @Localizer["str.remove"] </button>
                            </div>
                        </div>
                    }
                </div>#1#
                <MudDataGrid Items="building.ActionList">
                    <Columns>
                        <TemplateColumn Title="@Localizer["str.takeFrom"]" HeaderStyle="width: 250px;">
                            <CellTemplate>
                                <MudStack Row>
                                    <MudSelect @bind-Value="@context.Item.SourceContainerGuid" Style="width: 250px;">
                                        <MudSelectItem Value="Guid.Empty"> None</MudSelectItem>
                                        @foreach (var container in building.GetAttachedContainers())
                                        {
                                            if (container.GetBuilding().UUID == @context.Item.SourceContainerGuid) continue;
                                            <MudSelectItem
                                                Value="@container.GetBuilding().UUID"> @container.GetBuilding().GetBuildingIdentityInfo()</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="@Localizer["str.sendTo"]" HeaderStyle="width: 250px;">
                            <CellTemplate>
                                <MudStack Row>
                                    <MudSelect @bind-Value="@context.Item.TargetContainerGuid" Style="width: 250px;">
                                        <MudSelectItem Value="Guid.Empty"> None</MudSelectItem>
                                        @foreach (var container in building.Network.GetMemberList())
                                        {
                                            if (container.GetBuilding().UUID == @context.Item.SourceContainerGuid) continue;
                                            <MudSelectItem
                                                Value="@container.GetBuilding().UUID"> @container.GetBuilding().GetBuildingIdentityInfo()</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="@Localizer["str.resources"]" HeaderStyle="width: 150px;">
                            <CellTemplate>
                                <MudStack Row>
                                    <MudSelect @bind-Value="@context.Item.Content.ID" Style="width: 50px;">
                                        <MudSelectItem Value="@string.Empty"> None</MudSelectItem>
                                        @foreach (var container in building.GetAttachedContainers())
                                        {
                                            @foreach (var itemSlot in (@context.Item.ExtractFromInput ? container.GetMachineContainer().GetInputSlots() : container.GetMachineContainer().GetOutputSlots()))
                                            {
                                                if (itemSlot.IsValid)
                                                {
                                                    <MudSelectItem
                                                        Value="itemSlot.GetItem().ID"> @Utils.GetNameFromId(itemSlot.GetItem().ID) </MudSelectItem>
                                                }
                                            }
                                        }
                                    </MudSelect>
                                    *
                                    <MudNumericField HideSpinButtons="true" Style="width: 40px"
                                                     @bind-Value="@context.Item.Content.Quantity" Min="0"
                                                     Max="@building.PumpSpeed"/>
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="@Localizer["str.extractFromInput"]" HeaderStyle="width: 50px;">
                            <CellTemplate>
                                <MudCheckBox @bind-Value="@context.Item.ExtractFromInput"></MudCheckBox>
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn Title="@Localizer["str.enable"]" HeaderStyle="width: 50px;">
                            <CellTemplate>
                                <MudCheckBox @bind-Value="@context.Item.Enabled"></MudCheckBox>
                            </CellTemplate>
                        </TemplateColumn>
                        
                        <TemplateColumn Title="@Localizer["str.pipeActions"]" HeaderStyle="width: 100px;">
                            <CellTemplate>
                                <MudButton Variant="Variant.Filled" OnClick="() => { building.ActionList.Remove(context.Item); }">@Localizer["str.remove"]</MudButton>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            }
        </div>

        <div>
            <div class="d-flex align-items-center" style="cursor: ns-resize;">
                <span style="text-decoration: underline"
                      @onclick="ToggleAttachedVisibility"> @Localizer["str.pipeConnectNeighbor"]:@building.GetAttachedContainers().Count@(showAttachedContainers ? "▼" : "►") </span>
            </div>
            @if (showAttachedContainers)
            {
                <div class="form-group">
                    <select multiple class="form-control">
                        @foreach (var member in building.GetAttachedContainers())
                        {
                            <option>@member.GetBuilding().GetBuildingIdentityInfo())</option>
                        }
                    </select>
                </div>
            }
        </div>

        <div>
            <div class="d-flex align-items-center" style="cursor: ns-resize;">
                <span style="text-decoration: underline"
                      @onclick="ToggleNetworkMembersVisibility"> @Localizer["str.networkMembers"]:@building.Network.GetMemberList().Count@(showNetworkMembers ? "▼" : "►") </span>
            </div>
            @if (showNetworkMembers)
            {
                <div class="form-group">
                    <select multiple class="form-control">
                        @foreach (var member in building.Network.GetMemberList())
                        {
                            <option>@member.GetBuilding().GetBuildingIdentityInfo()</option>
                        }
                    </select>
                </div>
            }
        </div>*@
    </div>
}
else
{
    <p>Building not found.</p>
}
<hr class="hr"/>

@code {
    [Parameter] public string buildingIndex { get; set; }

    private Pipe? building;
    private bool showRelatedActions;

    private IEnumerable<ExtractAction> _actions
    {
        get
        {
            if (showRelatedActions)
            {
                return building.Network.GetRelatedActions(building);
            }
            else
            {
                return building.ActionList;
            }
        }
    }
    
    protected override void OnInitialized()
    {
        StartTimer(1);
        building = Utils.GetBuildingWithIndex(int.Parse(buildingIndex)) as Pipe;
        base.OnInitialized();
    }

    protected override void OnTimer(object? state)
    {
        base.OnTimer(state);
        SafeStateHasChanged();
    }

    private List<ResourceItemBase> GetAttachedContainerContent(ExtractAction action)
    {
        var result = new List<ResourceItemBase>();
        foreach (var container in building.GetAttachedContainers())
        {
            foreach (var itemSlot in (action.ExtractFromInput ? container.GetMachineContainer().GetInputSlots() : container.GetMachineContainer().GetOutputSlots()))
            {
                if (itemSlot.IsValid)
                {
                    result.Add(itemSlot.GetItem());
                }
            }
        }

        if (!string.IsNullOrEmpty(action.Content.ID) && result.All(i => i.ID != action.Content.ID))
        {
            result.Add(action.Content);
        }
        
        return result;
    }
    
    /*

    private bool showNetworkMembers = false;

    private void ToggleNetworkMembersVisibility()
    {
        showNetworkMembers = !showNetworkMembers;
    }


    private bool showAttachedContainers = false;

    private void ToggleAttachedVisibility()
    {
        showAttachedContainers = !showAttachedContainers;
    }

    private bool showActionList = false;

    private void ToggleActionVisibility()
    {
        showActionList = !showActionList;
    }*/
}