@page "/WorkbenchDetail/{buildingIndex}"
@using IdleFactory.Game.Building
@using IdleFactory.Util
@using Microsoft.Extensions.Localization
@using IdleFactory.Components.Components
@rendermode InteractiveServer
@inherits BaseRefreshablePage

@inject IStringLocalizer<Resources> Localizer
@inject NavigationManager NavigationManager

<h3>@Localizer["str.buildingDetail"]</h3>

@if (building != null)
{
    <MachineDetailBaseHeader machine="@this.building"/>
    //<div class="scrollable-list">
    <div class="container">
        @*Inputs*@
        <div class="row">
            <div class="col">
                @Localizer["str.input"]
                @for (int i = 0; i < building.GetMachineContainer().GetInputSlots().Length; i++)
                {
                    <div class="row">
                        <SlotComponent slot="@(building.GetMachineContainer().GetInputSlots()[i])"/>
                    </div>
                }
            </div>
            @*Outputs*@
            <div class="col">
                @Localizer["str.output"]
                @for (int i = 0; i < building.GetMachineContainer().GetOutputSlots().Length; i++)
                {
                    <div class="row">
                        <SlotComponent isOutput="@true" slot="@(building.GetMachineContainer().GetOutputSlots()[i])"/>
                    </div>
                }
            </div>
        </div>
    </div>
    //</div>
}
else
{
    <p>Building not found.</p>
}
<hr class="hr" />
@code {
    [Parameter] public string buildingIndex { get; set; }

    private Workbench? building;

    protected override void OnInitialized()
    {
        StartTimer(1);
        building = Utils.GetBuildingWithIndex(int.Parse(buildingIndex)) as Workbench;
        base.OnInitialized();
    }

    protected override void OnTimer(object? state)
    {
        base.OnTimer(state);
        SafeStateHasChanged();
    }
}