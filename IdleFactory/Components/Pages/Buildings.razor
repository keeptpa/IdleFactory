@page "/Buildings"
@using IdleFactory.Game.Building.Base
@using IdleFactory.Game.Modules
@using IdleFactory.State
@using IdleFactory.Util
@using Microsoft.Extensions.Localization
@rendermode InteractiveServer
@inherits BaseRefreshablePage
@inject IStringLocalizer<Resources> Localizer
@inject NavigationManager NavigationManager
@inject ICookie cookie

<h3>@Localizer["str.building"]</h3>

@foreach (var building in buildings)
{
    <p>@Utils.GetNameFromId(building.ID)
        <button class="btn btn-primary"
                @onclick="() => {OnDetailClick(building);}"> @Localizer["str.buildingDetail"]</button>
        <button class="btn btn-primary"
                @onclick="() => {OnRetriveClick(building);}"> @Localizer["str.buildingRetrieve"]</button>
    </p>
}

@code {
    List<BuildingBase> buildings = SingletonHolder.GetSingleton<GameStateHolder>().GetAllBuildingsPlaced();

    private string curPlayerName = "";

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        curPlayerName = await cookie.GetValue("id");
    }
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        StartTimer(3);
    }

    protected override void OnTimer(object? state)
    {
        base.OnTimer(state);
        buildings = SingletonHolder.GetSingleton<GameStateHolder>().GetAllBuildingsPlaced();
        SafeStateHasChanged();
    }

    private void OnDetailClick(BuildingBase build)
    {
        var buildIndex = build.GetIndex();
        NavigationManager.NavigateTo($"/{build.DetailSubPath}/{buildIndex}");
    }
    
    private void OnRetriveClick(BuildingBase build)
    {
        var isSuccess = build.Retrieve();
        if (isSuccess)
        {
            Utils.GetModule<NotificationModule>().SetNotify(new NotifyItem()
            {
                notifyString = "notify.buildingRetrieve",
                parameters = new string[] {curPlayerName, build.ID}
            });
            SafeStateHasChanged();
        }
    }
}