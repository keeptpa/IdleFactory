@page "/resource"
@using IdleFactory.Game.Building.Base
@using IdleFactory.Game.Modules
@using IdleFactory.State
@using IdleFactory.Util
@using Microsoft.Extensions.Localization
@inherits BaseRefreshablePage
@inject IStringLocalizer<Resources> Localizer
@rendermode InteractiveServer
@inject ICookie cookie

@*<h3>@Localizer["str.building"]</h3>
@foreach(var item in _gameStateHolder.GetAllBuildingsNotPlaced())
{
    <p>@Localizer[item.ID]</p>
}
<h3>@Localizer["str.resources"]</h3>
@foreach(var item in _gameStateHolder.GetAllResources())
{
    <p> @item.Value.Name, @item.Value.Quantity</p>
}*@

<div class="resources-container">
    <div class="tab-navigation">
        <button class=@((curTab == 1) ? "tab-btn active" : "tab-btn") @onclick="() => {OnSwitchTab(1);}">Buildings</button>
        <button class=@((curTab == 2) ? "tab-btn active" : "tab-btn") @onclick="() => {OnSwitchTab(2);}">Resources</button>
    </div>
    <div class="tab-content">
        <div class="scrollable-list">
            <div class="container">
                @switch (curTab)
                {
                    case 1:
                        @foreach(var item in _gameStateHolder.GetAllBuildingsNotPlaced())
                        {
                            <div class="row border border-primary">
                                <div class="col">
                                    <div class="list-item">@Utils.GetNameFromId(item.Value.ID)</div>
                                </div>
                                @*<div class="col">
                                    <button class="btn btn-primary" style="margin-top: 0.2rem" @onclick="() => { OnClickBuild(item.Value); }">@Localizer["str.build"]</button>
                                </div>*@
                            </div>
                        }
                        break;
                    case 2:
                        @foreach(var item in _gameStateHolder.GetAllResources())
                        {
                            <div class="row border border-primary">
                                <div class="col">
                                    <div class="list-item">@Utils.GetNameFromId(item.Value.ID)</div>
                                </div>
                                <div class="col">
                                    <div class="list-item">@item.Value.Quantity</div>
                                </div>
                            </div>
                        }
                        break;
                    default:
                        break;
                }
            </div>
            @*<div class="list-item">Sawmill</div>*@
        </div>
    </div>
</div>

@code {
    private string curPlayerName = "";

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        curPlayerName = await cookie.GetValue("id");
    }
    
    private int curTab = 1;
    private GameStateHolder _gameStateHolder = SingletonHolder.GetSingleton<GameStateHolder>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        StartTimer(1);
    }

    protected override void OnTimer(object? state)
    {
        base.OnTimer(state);
        SafeStateHasChanged();
    }

    private void OnSwitchTab(int tab)
    {
        curTab = tab;
        SafeStateHasChanged();
    }

    /*private void OnClickBuild(ResourceItemBase buildingItem)
    {
        var state = SingletonHolder.GetSingleton<GameStateHolder>();
        var isSuccessful = state.TryBuild(buildingItem);
        if (isSuccessful)
        {
            Utils.GetModule<NotificationModule>().SetNotify(new NotifyItem()
            {
                notifyString = "notify.build",
                parameters = new string[] {curPlayerName, buildingItem.ID }
            });
        }
    }*/
}