@page "/Surface"
@using System.Collections.Generic
@using IdleFactory.Game.Building.Base
@using Microsoft.AspNetCore.Components.Web
@using IdleFactory.Components.Components
@using IdleFactory.State
@using IdleFactory.Util
@using Microsoft.Extensions.Localization
@using Position = IdleFactory.Game.Building.Base.Position
@rendermode InteractiveServer
@inherits BaseRefreshablePage
@inject IStringLocalizer<Resources> localizer;
@* Required *@
<MudThemeProvider/>
<MudPopoverProvider/>

@* Needed for dialogs *@
<MudDialogProvider/>

@* Needed for snackbars *@
<MudSnackbarProvider/>

<div class="surface-container"
     @onmousedown="StartDragging"
     @onmouseup="StopDragging"
     @onmousemove="OnMouseMove"
     @onmouseleave="StopDragging"
     @onwheel="OnMouseWheel"
     @onclick="PageClick"
     style="overflow: hidden; position: relative; width: 100%; height: 600px; background-color: #f0f0f0; cursor: @(_isDragging ? "grabbing" : "grab")">

    <div class="surface-grid"
         style="position: absolute; transform: translate(@(_offsetX)px, @(_offsetY)px) scale(@_zoomLevel); transform-origin: center; @(_isDragging ? "" : "transition: transform 0.1s ease-out;")">
        @for (int y = _maxY; y >= _minY; y--)
        {
            <div class="grid-row" style="display: flex; flex-direction: row;">
                @for (int x = _minX; x < _maxX; x++)
                {
                    int cellX = x;
                    int cellY = y;

                    <div class="grid-cell"
                         @onclick="() => CellClicked(cellX, cellY)"
                         @oncontextmenu="() => CellRightClicked(cellX, cellY)"
                         @oncontextmenu:preventDefault="true"
                         style="width: @(_cellSize)px; height: @(_cellSize)px; @(_showGridLines ? "border: 1px solid #ccc;" : "");">
                        <GridComponent X="x" Y="y" _building="@GetBuilding(cellX, cellY)"/>
                    </div>
                }
            </div>
        }
        @if (_showContextMenu)
        {
            <SurfaceContextMenuComponent contextMenuPos="@_contextMenuCellPos"/>
        }
    </div>

    <div class="control-panel"
         style="position: absolute; bottom: 10px; left: 10px; z-index: 10; background-color: white; padding: 10px; border-radius: 5px; box-shadow: 0 0 5px rgba(0,0,0,0.2);">
        @*<div class="mb-2">
            <button @onclick="ExpandGridRight" class="btn btn-sm btn-primary mr-1">Expand Right</button>
            <button @onclick="ExpandGridDown" class="btn btn-sm btn-primary mr-1">Expand Down</button>
            <button @onclick="ExpandGridLeft" class="btn btn-sm btn-primary mr-1">Expand Left</button>
            <button @onclick="ExpandGridUp" class="btn btn-sm btn-primary">Expand Up</button>
        </div>
        <div class="mb-2">
            <button @onclick="ZoomIn" class="btn btn-sm btn-secondary mr-1">Zoom In (+)</button>
            <button @onclick="ZoomOut" class="btn btn-sm btn-secondary mr-1">Zoom Out (-)</button>
            <button @onclick="ResetZoom" class="btn btn-sm btn-secondary">Reset Zoom (1:1)</button>
        </div>*@
        <div>
            <MudCheckBox @bind-Value="_showGridLines" Label="@localizer["str.showGrid"]"></MudCheckBox>
            <MudSelect @onfocus="RefreshData"  _showGridLines @bind-Value="BuildingSelection">
                @foreach (var item in _buildingAvailable)
                {
                    <MudSelectItem Value="@item.ID">@Utils.GetNameFromId(item.ID)</MudSelectItem>
                }
            </MudSelect>
            <MudCheckBox @bind-Value="BulkDestroy" Label="@localizer["str.bulkDestroy"]"></MudCheckBox>
            @*<div><select class="form-select" style="width: 160px; position: relative;"
                         @bind="BuildingSelection" @onfocus="RefreshData">
                <option value="" selected="@true"></option>
                @foreach (var item in _buildingAvailable)
                {
                    <option value="@item.ID">@Utils.GetNameFromId(item.ID)</option>
                }
            </select>
                <input type="checkbox" @bind="BulkDestroy" />
            </div>*@

        </div>
    </div>
</div>

@code {

    private enum MouseState
    {
        None,
        BulkBuilding,
        BulkDelete
    }

    //Mouse state
    private MouseState _mouseState = MouseState.None;

    // Grid properties
    private int _minX = -5;
    private int _maxX = 5;
    private int _minY = -5;
    private int _maxY = 5;

    private int _cellSize = 40;
    private bool _showGridLines = true;

    // Context menu properties
    private bool _showContextMenu = false;
    private Position _contextMenuCellPos;

    //bulk building & destroy
    private bool _bulkDestroy;

    private bool BulkDestroy
    {
        get => _bulkDestroy;
        set
        {
            _bulkDestroy = value;
            _mouseState = value ? MouseState.BulkDelete : (string.IsNullOrEmpty(BuildingSelection) ? MouseState.None : MouseState.BulkBuilding);
            _isDragging = false;
            _bulkBuildingId = "";
            SafeStateHasChanged();
        }
    }

    private string _bulkBuildingId = "";

    private string BuildingSelection
    {
        get => _bulkBuildingId;
        set
        {
            _bulkBuildingId = value;
            _mouseState = string.IsNullOrEmpty(value) ? MouseState.None : MouseState.BulkBuilding;
            _isDragging = false;
            _bulkDestroy = string.IsNullOrEmpty(value) && _bulkDestroy;
            SafeStateHasChanged();
        }
    }

    private List<ResourceItemBase> _buildingAvailable = new();

    private void RefreshData()
    {
        _buildingAvailable = SingletonHolder.GetSingleton<GameStateHolder>().GetAllBuildingsNotPlaced().Values.ToList();
        SafeStateHasChanged();
    }

    private void CellClicked(int cellX, int cellY)
    {
        if (!_isDragging && _mouseState != MouseState.None)
        {
            if (_mouseState == MouseState.BulkDelete)
            {
                if (GetBuilding(cellX, cellY).IsValid)
                {
                    GetBuilding(cellX, cellY).GetBuilding().Retrieve();
                    RefreshData();
                    SafeStateHasChanged();
                }
            }
            else if (_mouseState == MouseState.BulkBuilding)
            {
                if (GetBuilding(cellX, cellY).IsEmpty)
                {
                    if (!string.IsNullOrEmpty(BuildingSelection))
                    {
                        SingletonHolder.GetSingleton<GameStateHolder>().TryBuild(new ResourceItemBase() { ID = BuildingSelection, Quantity = 1 }, new Position(cellX, cellY));
                        RefreshData();
                        if (_buildingAvailable.All(i => i.ID != BuildingSelection))
                        {
                            BuildingSelection = "";
                        }

                        SafeStateHasChanged();
                    }
                }
                else
                {
                    //GetBuilding(cellX, cellY).GetBuilding().Retrieve();
                    //if (!string.IsNullOrEmpty(BuildingSelection))
                    //{
                    //    SingletonHolder.GetSingleton<GameStateHolder>().TryBuild(new ResourceItemBase() { ID = BuildingSelection, Quantity = 1 }, new Position(cellX, cellY));
                    //}
                }
            }
        }
    }

    // Cell interaction
    private void CellRightClicked(int x, int y)
    {
        // Only process click if we're not dragging
        if (!_isDragging && _mouseState == MouseState.None)
        {
            _showContextMenu = !_showContextMenu;
            _contextMenuCellPos = new Position()
            {
                X = x,
                Y = y
            };
            SafeStateHasChanged();
        }
    }

    #region Dragging

    // Dragging functionality
    private bool _isDragging = false;
    private double _offsetX = 0;
    private double _offsetY = 0;
    private double _lastX = 0;
    private double _lastY = 0;

    // Dragging handlers
    private void StartDragging(MouseEventArgs e)
    {
        if (_mouseState != MouseState.None) return;
        _isDragging = true;
        _lastX = e.ClientX;
        _lastY = e.ClientY;
    }

    private void StopDragging()
    {
        if (_mouseState != MouseState.None) return;
        _isDragging = false;
    }

    private void OnMouseMove(MouseEventArgs e)
    {
        if (_mouseState != MouseState.None) return;
        if (_isDragging)
        {
            var deltaX = e.ClientX - _lastX;
            var deltaY = e.ClientY - _lastY;

            _offsetX += deltaX;
            _offsetY += deltaY;

            _lastX = e.ClientX;
            _lastY = e.ClientY;

            SafeStateHasChanged();
        }
    }

    #endregion

    #region Zoom

    // Zoom properties
    private double _zoomLevel = 1.0;
    private const double ZoomIncrement = 0.1;
    private const double MinZoom = 0.2;
    private const double MaxZoom = 5.0;

    // Zoom functionality
    private void OnMouseWheel(WheelEventArgs e)
    {
        // Negative deltaY means scroll up/zoom in, positive means scroll down/zoom out
        double zoomDelta = -Math.Sign(e.DeltaY) * ZoomIncrement;

        // Calculate new zoom level
        double newZoom = Math.Clamp(_zoomLevel + zoomDelta, MinZoom, MaxZoom);

        // Get mouse position relative to grid center
        // For more advanced zoom, you would calculate this relative to the container

        // Apply new zoom
        _zoomLevel = newZoom;

        SafeStateHasChanged();
    }

    private void ZoomIn()
    {
        _zoomLevel = Math.Min(_zoomLevel + ZoomIncrement, MaxZoom);
        SafeStateHasChanged();
    }

    private void ZoomOut()
    {
        _zoomLevel = Math.Max(_zoomLevel - ZoomIncrement, MinZoom);
        SafeStateHasChanged();
    }

    private void ResetZoom()
    {
        _zoomLevel = 1.0;
        SafeStateHasChanged();
    }

    #endregion

    #region Expanison

    // Grid expansion methods
    private void ExpandGridRight()
    {
        _maxX += 10;
        SafeStateHasChanged();
    }

    private void ExpandGridDown()
    {
        _minY -= 10;
        SafeStateHasChanged();
    }

    private void ExpandGridLeft()
    {
        // When expanding left, we need to adjust the offset to keep visible area in view
        _offsetX += 10 * _cellSize * _zoomLevel;
        _minX -= 10;
        SafeStateHasChanged();
    }

    private void ExpandGridUp()
    {
        // When expanding up, we need to adjust the offset to keep visible area in view
        _offsetY += 10 * _cellSize * _zoomLevel;
        _maxY += 10;
        SafeStateHasChanged();
    }

    #endregion

    private BuildingSlot GetBuilding(int cellX, int cellY)
    {
        return SingletonHolder.GetSingleton<GameStateHolder>().GetBuildingSlot(cellX, cellY, true);
    }

    private void PageClick()
    {
        _showContextMenu = false;
        SafeStateHasChanged();
    }

    protected override void OnInitialized()
    {
        StartTimer(1);
        base.OnInitialized();
    }

    protected override void OnTimer(object? state)
    {
        SafeStateHasChanged();
        base.OnTimer(state);
    }

}